@{
    ViewData["Title"] = "Home Page";
}


<div id="bicycle-handler-app">
        <div class="button-container pb-3" style="text-align:center;">
            <button class="btn btn-secondary" v-on:click="loadBicycles">Load</button>
            <button class="btn btn-success" v-on:click="createBicycle">Create</button>
            <button v-if="enabledBackToList" class="btn btn-secondary" v-on:click="backToList">Back to list</button>
        </div>
        <div id="content" style="display: flex; justify-content: center; flex-wrap: wrap;">
            <div v-if="errors.length > 0">
                <span v-for="msg in errors" style="color:red;font-weight:bold;">{{ msg }}</span>
            </div>
            <div v-if="messages.length > 0">
                <span v-for="msg in messages" style="color:green;">{{ msg }}</span>
            </div>
            <template v-if="operationMode == 0">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Model</th>
                            <th>Price</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="bicycle in bicycles">
                            <td>{{ bicycle.id }}</td>
                            <td>{{ bicycle.model }}</td>
                            <td>{{ bicycle.price }}</td>
                            <td style="width:20%;text-align:right;">
                                <button class="btn btn-info" v-on:click="viewBicycle(bicycle)">View</button>
                                <button class="btn btn-warning" v-on:click="editBicycle(bicycle)">Edit</button>
                                <button class="btn btn-danger" v-on:click="deleteBicycle(bicycle)">Delete</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </template>
            <template v-else-if="operationMode == 1">
                <view-component v-bind:bicycle="selectedBicycle"></view-component>
            </template>
            <template v-else>
                <!--Create and edit case-->
                <editor-component v-bind:bicycle="selectedBicycle"
                                  v-on:saved="savedSuccessfully"
                                  v-on:cancelled="operationCancelled"></editor-component>
            </template>
        </div>
    </div>


<script src="~/lib/vue/dist/vue.js"></script>
<script src="~/lib/axios/dist/axios.js"></script>

<script type="text/javascript">
    const axi = axios.create({
        baseURL: 'http://localhost:56411/api/bicycle/'
    });

    var bicycleHandlerApp = new Vue({
        el: '#bicycle-handler-app',
        data: {
            bicycles: [],
            selectedBicycle: {},
            operationMode: 0, // 0 listing, 1 view, 2 create, 3 edit
            messages: [],
            errors: []
        },
        computed: {
            enabledBackToList() {
                return this.operationMode != 0;
            }
        },
        methods: {
            loadBicycles() {
                axi.get('GetAll').then((response) => {
                    this.bicycles = response.data;
                    console.log(response.data);
                }).catch((err) => {
                    console.log(err);
                });
            },
            viewBicycle: function (bicycle) {
                this.selectedBicycle = bicycle;
                this.operationMode = 1;
            },
            createBicycle: function () {
                this.operationMode = 2;
            },
            editBicycle: function (bicycle) {
                this.selectedBicycle = bicycle;
                this.operationMode = 3;
            },
            deleteBicycle: function (bicycle) {
                axi.delete('Delete/' + bicycle.id).then((response) => { // Request body should not works there
                    if (response.data.isSuccess) {
                        this.messages.push("Bicycle deleted successfully");
                        this.loadBicycles();

                        setTimeout(() => { this.messages = []; }, 3000);
                    } else {
                        this.erros = response.data.messages;
                        setTimeout(() => { this.errors = []; }, 3000);
                    }
                }).catch((err) => {
                    this.errors.push('Error occured during delete.');
                    setTimeout(() => { this.errors = []; }, 3000);
                });
            },
            backToList: function () {
                this.selectedBicycle = {};
                this.operationMode = 0;
            },
            savedSuccessfully(msg) {
                this.selectedBicycle = {};
                this.messages.push(msg);
                console.log("saved");
                this.loadBicycles();
                this.operationMode = 0;

                setTimeout(() => { this.messages = []; }, 3000);
            },
            operationCancelled() {
                this.selectedBicycle = {};
                this.messages.push("The operation has been cancelled.");

                console.warn("cancelled");
                this.operationMode = 0;
                setTimeout(() => { this.messages = []; }, 3000);
            }
        }
    });

    Vue.component('view-component', {
        props: ['bicycle'],
        template: '#view-template'
    });

    Vue.component('editor-component', {
        props: ['bicycle'],
        template: '#editor-template',
        data: function () {
            return {
                innerBicycle: {},
                isEdit: false,
                errors: []
            };
        },
        methods: {
            save() {
                if (this.isEdit) {
                    axi.put('Update', this.innerBicycle).then(this.handleSuccess).catch((err) => {
                        console.log(err);
                        this.handleError(['Error occured during processing.']);
                    });
                }
                else {
                    axi.post('Create', this.innerBicycle).then(this.handleSuccess).catch((err) => {
                        console.log(err);
                        this.handleError(['Error occured during processing.']);
                    });
                }
            },
            cancel() {
                this.$emit('cancelled');
            },
            handleSuccess(response) {
                if (response.data.isSuccess) {
                    this.$emit('saved', this.isEdit ? "Bicycle edited successfully" : "Bicycle created successfully");
                } else {
                    this.handleError(response.data.messages);
                }
            },
            handleError(errorMessages) {
                this.errors = errorMessages;

                setTimeout(() => { this.errors = []; }, 3000); // Auto error clean after 3sec
            }
        },
         created: function () {
            if (this.bicycle.id != undefined) {
                this.isEdit = true;

                // Copy
                this.innerBicycle = {
                    id: this.bicycle.id,
                    model: this.bicycle.model,
                    price: this.bicycle.price
                };
            } else {
                // Create new
                this.innerBicycle = {
                    id: 0,
                    model: '',
                    price: 0
                };
            }
        }
    });
</script>

<script type="text/x-template" id="view-template">
    <div style="text-align:left" class="bicycle-view-container">
        <div>
            <strong>Id</strong><br />
            <label>{{ bicycle.id }}</label>
        </div>
        <div>
            <strong>Model</strong><br />
            <label>{{ bicycle.model }}</label>
        </div>
        <div>
            <strong>Price</strong><br />
            <label>{{ bicycle.price }}</label>
        </div>
    </div>
</script>

<script type="text/x-template" id="editor-template">
    <div style="text-align:left" class="bicycle-view-container">
        <div v-if="errors.length > 0">
            <span v-for="msg in errors" style="color:red;font-weight:bold;">{{ msg }}</span>
        </div>
        <div>
            <strong>Model</strong><br />
            <input type="text" v-model="innerBicycle.model" class="form-control" />
        </div>
        <div>
            <strong>Price</strong><br />
            <input type="number" v-model.number="innerBicycle.price" class="form-control" />
        </div>
        <div class="float-right pt-3">
            <button class="btn btn-primary" v-on:click="save">Mentés</button>
            <button class="btn btn-secondary" v-on:click="cancel">Mégsem</button>
        </div>
    </div>
</script>
